trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"

variables:
  COMPOSE_FILE: docker-compose.yml
  NODE_API_URL: http://localhost:80/analyze

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
    displayName: "Use Python"

  - script: |
      echo "Installing Docker Engine 20.10+"
      sudo apt-get update
      sudo apt-get remove -y docker docker-engine docker.io containerd runc || true
      sudo apt-get install -y ca-certificates curl gnupg lsb-release
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      sudo apt-get update
      sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      docker --version
    displayName: "Install latest Docker Engine"

  - script: |
      echo "Installing Docker Compose v2 (plugin)..."
      mkdir -p ~/.docker/cli-plugins
      curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
      chmod +x ~/.docker/cli-plugins/docker-compose
      docker compose version
    displayName: "Install Docker Compose v2"

  - script: docker compose version
    displayName: "Check Docker Compose version"

  - script: |
      echo "Validating docker compose file..."
      docker compose -f $(COMPOSE_FILE) config
    displayName: "Validate docker compose syntax"

  - script: |
      echo "Building all services..."
      docker compose -f $(COMPOSE_FILE) build --no-cache
    displayName: "Build all Docker services"

  - script: |
      echo "Starting services..."
      docker compose -f $(COMPOSE_FILE) up -d
    displayName: "Start containers (for test)"

  - script: |
      echo "Waiting for node-api to be ready..."
      for i in {1..10}; do
        curl -s --fail $(NODE_API_URL) || sleep 3
      done
      echo "Node API is reachable"
    displayName: "Healthcheck on /analyze"
    continueOnError: false

  - script: |
      echo "Stopping test containers..."
      docker compose -f $(COMPOSE_FILE) down
    displayName: "Cleanup (docker compose down)"

  - task: AzureWebAppContainer@1
    displayName: "Deploy to Azure Web App (Docker Compose)"
    inputs:
      azureSubscription: "isskin-backend-connection"
      appName: "isskin-backend-app"
      multicontainerConfigType: "Compose"
      multicontainerConfigFile: "docker-compose.yml"
