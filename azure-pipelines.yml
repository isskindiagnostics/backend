trigger:
  branches:
    include:
      - main

pool:
  vmImage: "ubuntu-latest"

variables:
  - group: acr-secrets
  - group: docker-secrets
  - name: COMPOSE_FILE
    value: docker-compose.yml
  - name: NODE_API_URL
    value: http://localhost:80/analyze

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.x"
    displayName: "Use Python"

  - script: |
      echo "Installing Docker Engine using official Docker install script..."
      curl -fsSL https://get.docker.com | sudo sh
      docker --version
    displayName: "Install Docker Engine (official script)"

  - script: |
      echo "Installing Docker Compose v2"
      mkdir -p ~/.docker/cli-plugins
      curl -SL https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
      chmod +x ~/.docker/cli-plugins/docker-compose
      docker compose version
    displayName: "Install Docker Compose v2"

  - script: |
      echo "FIREBASE_CREDENTIAL=$(FIREBASE_CREDENTIAL)" > .env
      echo "REDIS_HOST=$(REDIS_HOST)" >> .env
      echo "FIREBASE_STORAGE_BUCKET=$(FIREBASE_STORAGE_BUCKET)" >> .env
      echo "FRONTEND_URLS=$(FRONTEND_URLS)" >> .env
    displayName: "Create .env file"
    env:
      FIREBASE_CREDENTIAL: $(FIREBASE_CREDENTIAL)
      REDIS_HOST: $(REDIS_HOST)
      FIREBASE_STORAGE_BUCKET: $(FIREBASE_STORAGE_BUCKET)
      FRONTEND_URLS: $(FRONTEND_URLS)

  - script: docker compose -f $(COMPOSE_FILE) config
    displayName: "Validate docker-compose.yml"

  - script: |
      echo "Logging into ACR and building/pushing images..."
      echo "$(DOCKER_REGISTRY_PASS)" | docker login $(DOCKER_REGISTRY_URL) -u $(DOCKER_REGISTRY_USER) --password-stdin

      docker build -t $(DOCKER_REGISTRY_URL)/node-api:latest ./queue
      docker build -t $(DOCKER_REGISTRY_URL)/node-worker:latest ./queue
      docker build -t $(DOCKER_REGISTRY_URL)/python-backend:latest ./app

      docker push $(DOCKER_REGISTRY_URL)/node-api:latest
      docker push $(DOCKER_REGISTRY_URL)/node-worker:latest
      docker push $(DOCKER_REGISTRY_URL)/python-backend:latest
    displayName: "Login, Build and Push Docker Images"

  - task: AzureWebAppContainer@1
    displayName: "Deploy to Azure Web App"
    inputs:
      azureSubscription: "isskin-backend-connection"
      appName: "isskin-backend-app"
      dockerComposeFile: "$(COMPOSE_FILE)"
      multiContainerConfigType: "compose"

